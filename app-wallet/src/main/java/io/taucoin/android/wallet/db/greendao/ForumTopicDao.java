package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.ForumTopic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORUM_TOPIC".
*/
public class ForumTopicDao extends AbstractDao<ForumTopic, Long> {

    public static final String TABLENAME = "FORUM_TOPIC";

    /**
     * Properties of entity ForumTopic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Chainid = new Property(1, String.class, "chainid", false, "CHAINID");
        public final static Property TxId = new Property(2, String.class, "txId", false, "TX_ID");
        public final static Property BlockHash = new Property(3, String.class, "blockHash", false, "BLOCK_HASH");
        public final static Property Nounce = new Property(4, long.class, "nounce", false, "NOUNCE");
        public final static Property TimeStamp = new Property(5, long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property TSender = new Property(6, String.class, "tSender", false, "T_SENDER");
        public final static Property Isender = new Property(7, String.class, "isender", false, "ISENDER");
        public final static Property RelayMa = new Property(8, String.class, "relayMa", false, "RELAY_MA");
        public final static Property Fee = new Property(9, long.class, "fee", false, "FEE");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Text = new Property(11, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(12, int.class, "type", false, "TYPE");
        public final static Property Hash = new Property(13, String.class, "hash", false, "HASH");
        public final static Property Bookmark = new Property(14, int.class, "bookmark", false, "BOOKMARK");
        public final static Property ContactInfo = new Property(15, String.class, "contactInfo", false, "CONTACT_INFO");
        public final static Property UserName = new Property(16, String.class, "userName", false, "USER_NAME");
        public final static Property Profile = new Property(17, String.class, "profile", false, "PROFILE");
        public final static Property ReferId = new Property(18, String.class, "referId", false, "REFER_ID");
        public final static Property Intro = new Property(19, String.class, "intro", false, "INTRO");
        public final static Property Content = new Property(20, String.class, "content", false, "CONTENT");
    }


    public ForumTopicDao(DaoConfig config) {
        super(config);
    }
    
    public ForumTopicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORUM_TOPIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHAINID\" TEXT," + // 1: chainid
                "\"TX_ID\" TEXT," + // 2: txId
                "\"BLOCK_HASH\" TEXT," + // 3: blockHash
                "\"NOUNCE\" INTEGER NOT NULL ," + // 4: nounce
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 5: timeStamp
                "\"T_SENDER\" TEXT," + // 6: tSender
                "\"ISENDER\" TEXT," + // 7: isender
                "\"RELAY_MA\" TEXT," + // 8: relayMa
                "\"FEE\" INTEGER NOT NULL ," + // 9: fee
                "\"TITLE\" TEXT," + // 10: title
                "\"TEXT\" TEXT," + // 11: text
                "\"TYPE\" INTEGER NOT NULL ," + // 12: type
                "\"HASH\" TEXT," + // 13: hash
                "\"BOOKMARK\" INTEGER NOT NULL ," + // 14: bookmark
                "\"CONTACT_INFO\" TEXT," + // 15: contactInfo
                "\"USER_NAME\" TEXT," + // 16: userName
                "\"PROFILE\" TEXT," + // 17: profile
                "\"REFER_ID\" TEXT," + // 18: referId
                "\"INTRO\" TEXT," + // 19: intro
                "\"CONTENT\" TEXT);"); // 20: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORUM_TOPIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ForumTopic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chainid = entity.getChainid();
        if (chainid != null) {
            stmt.bindString(2, chainid);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(3, txId);
        }
 
        String blockHash = entity.getBlockHash();
        if (blockHash != null) {
            stmt.bindString(4, blockHash);
        }
        stmt.bindLong(5, entity.getNounce());
        stmt.bindLong(6, entity.getTimeStamp());
 
        String tSender = entity.getTSender();
        if (tSender != null) {
            stmt.bindString(7, tSender);
        }
 
        String isender = entity.getIsender();
        if (isender != null) {
            stmt.bindString(8, isender);
        }
 
        String relayMa = entity.getRelayMa();
        if (relayMa != null) {
            stmt.bindString(9, relayMa);
        }
        stmt.bindLong(10, entity.getFee());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(12, text);
        }
        stmt.bindLong(13, entity.getType());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(14, hash);
        }
        stmt.bindLong(15, entity.getBookmark());
 
        String contactInfo = entity.getContactInfo();
        if (contactInfo != null) {
            stmt.bindString(16, contactInfo);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(17, userName);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(18, profile);
        }
 
        String referId = entity.getReferId();
        if (referId != null) {
            stmt.bindString(19, referId);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(20, intro);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(21, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ForumTopic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chainid = entity.getChainid();
        if (chainid != null) {
            stmt.bindString(2, chainid);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(3, txId);
        }
 
        String blockHash = entity.getBlockHash();
        if (blockHash != null) {
            stmt.bindString(4, blockHash);
        }
        stmt.bindLong(5, entity.getNounce());
        stmt.bindLong(6, entity.getTimeStamp());
 
        String tSender = entity.getTSender();
        if (tSender != null) {
            stmt.bindString(7, tSender);
        }
 
        String isender = entity.getIsender();
        if (isender != null) {
            stmt.bindString(8, isender);
        }
 
        String relayMa = entity.getRelayMa();
        if (relayMa != null) {
            stmt.bindString(9, relayMa);
        }
        stmt.bindLong(10, entity.getFee());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(12, text);
        }
        stmt.bindLong(13, entity.getType());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(14, hash);
        }
        stmt.bindLong(15, entity.getBookmark());
 
        String contactInfo = entity.getContactInfo();
        if (contactInfo != null) {
            stmt.bindString(16, contactInfo);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(17, userName);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(18, profile);
        }
 
        String referId = entity.getReferId();
        if (referId != null) {
            stmt.bindString(19, referId);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(20, intro);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(21, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ForumTopic readEntity(Cursor cursor, int offset) {
        ForumTopic entity = new ForumTopic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chainid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // txId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blockHash
            cursor.getLong(offset + 4), // nounce
            cursor.getLong(offset + 5), // timeStamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tSender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // relayMa
            cursor.getLong(offset + 9), // fee
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // text
            cursor.getInt(offset + 12), // type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // hash
            cursor.getInt(offset + 14), // bookmark
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // contactInfo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // profile
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // referId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // intro
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ForumTopic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChainid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTxId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNounce(cursor.getLong(offset + 4));
        entity.setTimeStamp(cursor.getLong(offset + 5));
        entity.setTSender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRelayMa(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFee(cursor.getLong(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setText(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.getInt(offset + 12));
        entity.setHash(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBookmark(cursor.getInt(offset + 14));
        entity.setContactInfo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setProfile(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setReferId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIntro(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setContent(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ForumTopic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ForumTopic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ForumTopic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
