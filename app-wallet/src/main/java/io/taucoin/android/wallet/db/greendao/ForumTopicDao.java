package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.ForumTopic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORUM_TOPIC".
*/
public class ForumTopicDao extends AbstractDao<ForumTopic, Long> {

    public static final String TABLENAME = "FORUM_TOPIC";

    /**
     * Properties of entity ForumTopic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property Fee = new Property(3, long.class, "fee", false, "FEE");
        public final static Property Sender = new Property(4, String.class, "sender", false, "SENDER");
        public final static Property TimeStamp = new Property(5, long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property ReferId = new Property(6, String.class, "referId", false, "REFER_ID");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property Hash = new Property(8, String.class, "hash", false, "HASH");
    }


    public ForumTopicDao(DaoConfig config) {
        super(config);
    }
    
    public ForumTopicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORUM_TOPIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TEXT\" TEXT," + // 2: text
                "\"FEE\" INTEGER NOT NULL ," + // 3: fee
                "\"SENDER\" TEXT," + // 4: sender
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 5: timeStamp
                "\"REFER_ID\" TEXT," + // 6: referId
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"HASH\" TEXT);"); // 8: hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORUM_TOPIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ForumTopic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
        stmt.bindLong(4, entity.getFee());
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(5, sender);
        }
        stmt.bindLong(6, entity.getTimeStamp());
 
        String referId = entity.getReferId();
        if (referId != null) {
            stmt.bindString(7, referId);
        }
        stmt.bindLong(8, entity.getType());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(9, hash);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ForumTopic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
        stmt.bindLong(4, entity.getFee());
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(5, sender);
        }
        stmt.bindLong(6, entity.getTimeStamp());
 
        String referId = entity.getReferId();
        if (referId != null) {
            stmt.bindString(7, referId);
        }
        stmt.bindLong(8, entity.getType());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(9, hash);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ForumTopic readEntity(Cursor cursor, int offset) {
        ForumTopic entity = new ForumTopic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.getLong(offset + 3), // fee
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sender
            cursor.getLong(offset + 5), // timeStamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // referId
            cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // hash
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ForumTopic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFee(cursor.getLong(offset + 3));
        entity.setSender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeStamp(cursor.getLong(offset + 5));
        entity.setReferId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setHash(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ForumTopic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ForumTopic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ForumTopic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
