package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.TransactionHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_HISTORY".
*/
public class TransactionHistoryDao extends AbstractDao<TransactionHistory, Long> {

    public static final String TABLENAME = "TRANSACTION_HISTORY";

    /**
     * Properties of entity TransactionHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TxId = new Property(1, String.class, "txId", false, "TX_ID");
        public final static Property FromAddress = new Property(2, String.class, "fromAddress", false, "FROM_ADDRESS");
        public final static Property ToAddress = new Property(3, String.class, "toAddress", false, "TO_ADDRESS");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Amount = new Property(5, String.class, "amount", false, "AMOUNT");
        public final static Property Memo = new Property(6, String.class, "memo", false, "MEMO");
        public final static Property Fee = new Property(7, String.class, "fee", false, "FEE");
        public final static Property Result = new Property(8, String.class, "result", false, "RESULT");
        public final static Property Message = new Property(9, String.class, "message", false, "MESSAGE");
        public final static Property BlockHeight = new Property(10, long.class, "blockHeight", false, "BLOCK_HEIGHT");
        public final static Property TransExpiry = new Property(11, long.class, "transExpiry", false, "TRANS_EXPIRY");
        public final static Property TimeBasis = new Property(12, int.class, "timeBasis", false, "TIME_BASIS");
        public final static Property ReadStatus = new Property(13, int.class, "readStatus", false, "READ_STATUS");
    }


    public TransactionHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TX_ID\" TEXT," + // 1: txId
                "\"FROM_ADDRESS\" TEXT," + // 2: fromAddress
                "\"TO_ADDRESS\" TEXT," + // 3: toAddress
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"AMOUNT\" TEXT," + // 5: amount
                "\"MEMO\" TEXT," + // 6: memo
                "\"FEE\" TEXT," + // 7: fee
                "\"RESULT\" TEXT," + // 8: result
                "\"MESSAGE\" TEXT," + // 9: message
                "\"BLOCK_HEIGHT\" INTEGER NOT NULL ," + // 10: blockHeight
                "\"TRANS_EXPIRY\" INTEGER NOT NULL ," + // 11: transExpiry
                "\"TIME_BASIS\" INTEGER NOT NULL ," + // 12: timeBasis
                "\"READ_STATUS\" INTEGER NOT NULL );"); // 13: readStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(2, txId);
        }
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(3, fromAddress);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(4, toAddress);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(8, fee);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(9, result);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
        stmt.bindLong(11, entity.getBlockHeight());
        stmt.bindLong(12, entity.getTransExpiry());
        stmt.bindLong(13, entity.getTimeBasis());
        stmt.bindLong(14, entity.getReadStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(2, txId);
        }
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(3, fromAddress);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(4, toAddress);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(8, fee);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(9, result);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
        stmt.bindLong(11, entity.getBlockHeight());
        stmt.bindLong(12, entity.getTransExpiry());
        stmt.bindLong(13, entity.getTimeBasis());
        stmt.bindLong(14, entity.getReadStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionHistory readEntity(Cursor cursor, int offset) {
        TransactionHistory entity = new TransactionHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // txId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // toAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // memo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fee
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // result
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // message
            cursor.getLong(offset + 10), // blockHeight
            cursor.getLong(offset + 11), // transExpiry
            cursor.getInt(offset + 12), // timeBasis
            cursor.getInt(offset + 13) // readStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTxId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFromAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMemo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFee(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setResult(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMessage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBlockHeight(cursor.getLong(offset + 10));
        entity.setTransExpiry(cursor.getLong(offset + 11));
        entity.setTimeBasis(cursor.getInt(offset + 12));
        entity.setReadStatus(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
