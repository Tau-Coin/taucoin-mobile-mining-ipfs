package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.BlockInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLOCK_INFO".
*/
public class BlockInfoDao extends AbstractDao<BlockInfo, Long> {

    public static final String TABLENAME = "BLOCK_INFO";

    /**
     * Properties of entity BlockInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BlockHeight = new Property(1, int.class, "blockHeight", false, "BLOCK_HEIGHT");
        public final static Property BlockSync = new Property(2, int.class, "blockSync", false, "BLOCK_SYNC");
        public final static Property BlockDownload = new Property(3, int.class, "blockDownload", false, "BLOCK_DOWNLOAD");
        public final static Property AvgIncome = new Property(4, String.class, "avgIncome", false, "AVG_INCOME");
        public final static Property MedianFee = new Property(5, String.class, "medianFee", false, "MEDIAN_FEE");
        public final static Property MinerInfo = new Property(6, String.class, "minerInfo", false, "MINER_INFO");
        public final static Property TotalPower = new Property(7, String.class, "totalPower", false, "TOTAL_POWER");
        public final static Property TxsPool = new Property(8, String.class, "txsPool", false, "TXS_POOL");
        public final static Property Circulation = new Property(9, String.class, "circulation", false, "CIRCULATION");
    }


    public BlockInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BlockInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLOCK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BLOCK_HEIGHT\" INTEGER NOT NULL ," + // 1: blockHeight
                "\"BLOCK_SYNC\" INTEGER NOT NULL ," + // 2: blockSync
                "\"BLOCK_DOWNLOAD\" INTEGER NOT NULL ," + // 3: blockDownload
                "\"AVG_INCOME\" TEXT," + // 4: avgIncome
                "\"MEDIAN_FEE\" TEXT," + // 5: medianFee
                "\"MINER_INFO\" TEXT," + // 6: minerInfo
                "\"TOTAL_POWER\" TEXT," + // 7: totalPower
                "\"TXS_POOL\" TEXT," + // 8: txsPool
                "\"CIRCULATION\" TEXT);"); // 9: circulation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLOCK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BlockInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBlockHeight());
        stmt.bindLong(3, entity.getBlockSync());
        stmt.bindLong(4, entity.getBlockDownload());
 
        String avgIncome = entity.getAvgIncome();
        if (avgIncome != null) {
            stmt.bindString(5, avgIncome);
        }
 
        String medianFee = entity.getMedianFee();
        if (medianFee != null) {
            stmt.bindString(6, medianFee);
        }
 
        String minerInfo = entity.getMinerInfo();
        if (minerInfo != null) {
            stmt.bindString(7, minerInfo);
        }
 
        String totalPower = entity.getTotalPower();
        if (totalPower != null) {
            stmt.bindString(8, totalPower);
        }
 
        String txsPool = entity.getTxsPool();
        if (txsPool != null) {
            stmt.bindString(9, txsPool);
        }
 
        String circulation = entity.getCirculation();
        if (circulation != null) {
            stmt.bindString(10, circulation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BlockInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBlockHeight());
        stmt.bindLong(3, entity.getBlockSync());
        stmt.bindLong(4, entity.getBlockDownload());
 
        String avgIncome = entity.getAvgIncome();
        if (avgIncome != null) {
            stmt.bindString(5, avgIncome);
        }
 
        String medianFee = entity.getMedianFee();
        if (medianFee != null) {
            stmt.bindString(6, medianFee);
        }
 
        String minerInfo = entity.getMinerInfo();
        if (minerInfo != null) {
            stmt.bindString(7, minerInfo);
        }
 
        String totalPower = entity.getTotalPower();
        if (totalPower != null) {
            stmt.bindString(8, totalPower);
        }
 
        String txsPool = entity.getTxsPool();
        if (txsPool != null) {
            stmt.bindString(9, txsPool);
        }
 
        String circulation = entity.getCirculation();
        if (circulation != null) {
            stmt.bindString(10, circulation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BlockInfo readEntity(Cursor cursor, int offset) {
        BlockInfo entity = new BlockInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // blockHeight
            cursor.getInt(offset + 2), // blockSync
            cursor.getInt(offset + 3), // blockDownload
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avgIncome
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // medianFee
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // minerInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // totalPower
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // txsPool
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // circulation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BlockInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlockHeight(cursor.getInt(offset + 1));
        entity.setBlockSync(cursor.getInt(offset + 2));
        entity.setBlockDownload(cursor.getInt(offset + 3));
        entity.setAvgIncome(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMedianFee(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMinerInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotalPower(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTxsPool(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCirculation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BlockInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BlockInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BlockInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
