package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.KeyValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEY_VALUE".
*/
public class KeyValueDao extends AbstractDao<KeyValue, Long> {

    public static final String TABLENAME = "KEY_VALUE";

    /**
     * Properties of entity KeyValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PubKey = new Property(1, String.class, "pubKey", false, "PUB_KEY");
        public final static Property PriKey = new Property(2, String.class, "priKey", false, "PRI_KEY");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property RawAddress = new Property(4, String.class, "rawAddress", false, "RAW_ADDRESS");
        public final static Property Balance = new Property(5, long.class, "balance", false, "BALANCE");
        public final static Property Power = new Property(6, long.class, "power", false, "POWER");
        public final static Property MiningIncome = new Property(7, long.class, "miningIncome", false, "MINING_INCOME");
        public final static Property NickName = new Property(8, String.class, "nickName", false, "NICK_NAME");
        public final static Property MiningState = new Property(9, String.class, "miningState", false, "MINING_STATE");
        public final static Property TransExpiry = new Property(10, long.class, "transExpiry", false, "TRANS_EXPIRY");
        public final static Property BlocksMined = new Property(11, long.class, "blocksMined", false, "BLOCKS_MINED");
        public final static Property MinedNo = new Property(12, long.class, "MinedNo", false, "MINED_NO");
        public final static Property MiningRank = new Property(13, String.class, "miningRank", false, "MINING_RANK");
        public final static Property MinerReward = new Property(14, String.class, "minerReward", false, "MINER_REWARD");
        public final static Property PartReward = new Property(15, String.class, "partReward", false, "PART_REWARD");
        public final static Property LastUseTime = new Property(16, long.class, "lastUseTime", false, "LAST_USE_TIME");
    }


    public KeyValueDao(DaoConfig config) {
        super(config);
    }
    
    public KeyValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEY_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PUB_KEY\" TEXT," + // 1: pubKey
                "\"PRI_KEY\" TEXT," + // 2: priKey
                "\"ADDRESS\" TEXT," + // 3: address
                "\"RAW_ADDRESS\" TEXT," + // 4: rawAddress
                "\"BALANCE\" INTEGER NOT NULL ," + // 5: balance
                "\"POWER\" INTEGER NOT NULL ," + // 6: power
                "\"MINING_INCOME\" INTEGER NOT NULL ," + // 7: miningIncome
                "\"NICK_NAME\" TEXT," + // 8: nickName
                "\"MINING_STATE\" TEXT," + // 9: miningState
                "\"TRANS_EXPIRY\" INTEGER NOT NULL ," + // 10: transExpiry
                "\"BLOCKS_MINED\" INTEGER NOT NULL ," + // 11: blocksMined
                "\"MINED_NO\" INTEGER NOT NULL ," + // 12: MinedNo
                "\"MINING_RANK\" TEXT," + // 13: miningRank
                "\"MINER_REWARD\" TEXT," + // 14: minerReward
                "\"PART_REWARD\" TEXT," + // 15: partReward
                "\"LAST_USE_TIME\" INTEGER NOT NULL );"); // 16: lastUseTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEY_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyValue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(2, pubKey);
        }
 
        String priKey = entity.getPriKey();
        if (priKey != null) {
            stmt.bindString(3, priKey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String rawAddress = entity.getRawAddress();
        if (rawAddress != null) {
            stmt.bindString(5, rawAddress);
        }
        stmt.bindLong(6, entity.getBalance());
        stmt.bindLong(7, entity.getPower());
        stmt.bindLong(8, entity.getMiningIncome());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(9, nickName);
        }
 
        String miningState = entity.getMiningState();
        if (miningState != null) {
            stmt.bindString(10, miningState);
        }
        stmt.bindLong(11, entity.getTransExpiry());
        stmt.bindLong(12, entity.getBlocksMined());
        stmt.bindLong(13, entity.getMinedNo());
 
        String miningRank = entity.getMiningRank();
        if (miningRank != null) {
            stmt.bindString(14, miningRank);
        }
 
        String minerReward = entity.getMinerReward();
        if (minerReward != null) {
            stmt.bindString(15, minerReward);
        }
 
        String partReward = entity.getPartReward();
        if (partReward != null) {
            stmt.bindString(16, partReward);
        }
        stmt.bindLong(17, entity.getLastUseTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyValue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(2, pubKey);
        }
 
        String priKey = entity.getPriKey();
        if (priKey != null) {
            stmt.bindString(3, priKey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String rawAddress = entity.getRawAddress();
        if (rawAddress != null) {
            stmt.bindString(5, rawAddress);
        }
        stmt.bindLong(6, entity.getBalance());
        stmt.bindLong(7, entity.getPower());
        stmt.bindLong(8, entity.getMiningIncome());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(9, nickName);
        }
 
        String miningState = entity.getMiningState();
        if (miningState != null) {
            stmt.bindString(10, miningState);
        }
        stmt.bindLong(11, entity.getTransExpiry());
        stmt.bindLong(12, entity.getBlocksMined());
        stmt.bindLong(13, entity.getMinedNo());
 
        String miningRank = entity.getMiningRank();
        if (miningRank != null) {
            stmt.bindString(14, miningRank);
        }
 
        String minerReward = entity.getMinerReward();
        if (minerReward != null) {
            stmt.bindString(15, minerReward);
        }
 
        String partReward = entity.getPartReward();
        if (partReward != null) {
            stmt.bindString(16, partReward);
        }
        stmt.bindLong(17, entity.getLastUseTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KeyValue readEntity(Cursor cursor, int offset) {
        KeyValue entity = new KeyValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pubKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // priKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rawAddress
            cursor.getLong(offset + 5), // balance
            cursor.getLong(offset + 6), // power
            cursor.getLong(offset + 7), // miningIncome
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nickName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // miningState
            cursor.getLong(offset + 10), // transExpiry
            cursor.getLong(offset + 11), // blocksMined
            cursor.getLong(offset + 12), // MinedNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // miningRank
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // minerReward
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // partReward
            cursor.getLong(offset + 16) // lastUseTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyValue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPubKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPriKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRawAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBalance(cursor.getLong(offset + 5));
        entity.setPower(cursor.getLong(offset + 6));
        entity.setMiningIncome(cursor.getLong(offset + 7));
        entity.setNickName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMiningState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTransExpiry(cursor.getLong(offset + 10));
        entity.setBlocksMined(cursor.getLong(offset + 11));
        entity.setMinedNo(cursor.getLong(offset + 12));
        entity.setMiningRank(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMinerReward(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPartReward(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLastUseTime(cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KeyValue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KeyValue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KeyValue entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
